/**
 * Pivonia Library
 *
 */
plugins {
    id 'java'
    id 'groovy' // for Spock
    id 'maven'
    id 'maven-publish'
}

configurations {
    deployerJars
}

/**
 * Settings
 */
rootProject.group = "eu.phisikus.pivonia"
rootProject.version = '0.0.6'


sourceCompatibility = JavaVersion.VERSION_1_10
targetCompatibility = JavaVersion.VERSION_1_10

/**
 * Dependencies
 */

repositories {
    mavenCentral()
}


dependencies {

    /**
     * Lombok
     */
    annotationProcessor 'org.projectlombok:lombok:1.18.4'
    implementation 'org.projectlombok:lombok:1.18.4'

    /**
     * Dependency Injection
     */
    annotationProcessor 'com.google.dagger:dagger-compiler:2.17'
    implementation 'com.google.dagger:dagger:2.17'

    /**
     * Serialization
     */
    compile 'de.undercouch:bson4jackson:2.9.2'

    /**
     * Encryption
     */
    compile 'com.google.crypto.tink:tink:1.2.0'

    /**
     * Utils
     */
    compile 'io.vavr:vavr:0.9.2'
    compile 'org.apache.logging.log4j:log4j-core:2.11.1'
    compile 'io.reactivex.rxjava2:rxjava:2.2.4'

    /**
     * Testing
     */
    testCompile 'org.codehaus.groovy:groovy-all:2.5.5'
    testCompile 'org.spockframework:spock-core:1.2-groovy-2.5'
    testCompile 'cglib:cglib-nodep:3.2.8'
    testCompile 'org.objenesis:objenesis:2.6'


    /**
     * Publishing
     */
    deployerJars 'org.apache.maven.wagon:wagon-ssh:3.1.0'
}

/**
 * (workaround) Custom sourceset that includes autogenerated classes
 * Useful for Dagger + Intelij mapping
 */
sourceSets {
    main {
        java {
            srcDir "${buildDir.absolutePath}/classes/java/main/"
        }
    }
}


/**
 * Test configuration
 */
test {
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }
}

/**
 * Maven Publishing
 */
publishing {
    publications {
        maven(MavenPublication) {
            groupId = rootProject.group
            artifactId = rootProject.name
            version = rootProject.version

            from components.java

            pom {
                name = 'Pivonia'
                description = 'Message Passing Library'
            }
        }
    }
}

uploadArchives {
    if (project.hasProperty('deploymentUrl')) {
        final deploymentUrl = project.property('deploymentUrl')
        repositories.mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: deploymentUrl)
        }
    }
}

/**
 * Custom task for CI
 */
task release(dependsOn: ['clean', 'build', 'uploadArchives'])
uploadArchives.mustRunAfter(build)

/**
 * Custom task for publishing snapshot versions
 */
task setSnapshotVersion(type: Task) {
    def getGitHash = { ->
        final stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    rootProject.version = rootProject.version + "-" + getGitHash()
}

task releaseSnapshot(dependsOn: ['clean', 'build', 'setSnapshotVersion', 'uploadArchives'])
(build as Task).mustRunAfter(setSnapshotVersion)
